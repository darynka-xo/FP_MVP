I got Flask+React erp project.
Back:
catalog_resources:
import json

from flask_restful import Resource, reqparse
from app.models import CatalogCup, CatalogCompany
from app import db
import json
from decimal import Decimal

class DecimalEncoder(json.JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Decimal):
            return float(obj)
        return super().default(obj)


class CatalogCupResource(Resource):
    def get(self):
        cups = CatalogCup.query.all()
        cups_data = [{
            'cup_type': cup.cup_type,
            'throat_diameter': float(cup.throat_diameter) if cup.throat_diameter else None,
            'bottom_diameter': float(cup.bottom_diameter) if cup.bottom_diameter else None,
            'height': float(cup.height) if cup.height else None,
            'capacity': cup.capacity,
            'density': float(cup.density) if cup.density else None,
            'width': float(cup.width) if cup.width else None,
            'quantity_in_report': cup.quantity_in_report,
            'sleeve': float(cup.sleeve) if cup.sleeve else None,
            'tooling_number': cup.tooling_number,
            'bottom_width': float(cup.bottom_width) if cup.bottom_width else None,
            'glasses_per_sleeve': cup.glasses_per_sleeve,
            'sleeves_per_box': cup.sleeves_per_box,
            'corrugated_box_size': cup.corrugated_box_size,
            'stacks_per_product': cup.stacks_per_product,
            'tape_per_box_m': float(cup.tape_per_box_m) if cup.tape_per_box_m else None,
            'boxes_per_pallet': cup.boxes_per_pallet,
            'packaging_pe': float(cup.packaging_pe) if cup.packaging_pe else None,
            'pe_sleeve_per_item': float(cup.pe_sleeve_per_item) if cup.pe_sleeve_per_item else None,
            'bottom_size': float(cup.bottom_size) if cup.bottom_size else None,
            'stretch_per_pallet_m': float(cup.stretch_per_pallet_m) if cup.stretch_per_pallet_m else None,
            'pe_weight': float(cup.pe_weight) if cup.pe_weight else None,
            'number_of_streams': cup.number_of_streams
        } for cup in cups]
        return cups_data, 200


    def post(self):
        parser = reqparse.RequestParser()
        for field in [
            'cup_type', 'throat_diameter', 'bottom_diameter', 'height',
            'capacity', 'density', 'width', 'quantity_in_report',
            'sleeve', 'tooling_number', 'bottom_width', 'glasses_per_sleeve',
            'sleeves_per_box', 'corrugated_box_size', 'stacks_per_product',
            'tape_per_box_m', 'boxes_per_pallet', 'packaging_pe',
            'pe_sleeve_per_item', 'bottom_size', 'stretch_per_pallet_m',
            'pe_weight', 'number_of_streams'
        ]:
            parser.add_argument(field)

        data = parser.parse_args()
        new_cup = CatalogCup(**data)
        db.session.add(new_cup)
        db.session.commit()
        return {'message': 'Cup added successfully'}, 201

    def delete(self, cup_type):
        cup = CatalogCup.query.get(cup_type)
        if not cup:
            return {'message': 'Cup not found'}, 404
        db.session.delete(cup)
        db.session.commit()
        return {'message': 'Cup deleted'}, 200

    def put(self, cup_type):
        cup = CatalogCup.query.get(cup_type)
        if not cup:
            return {'message': 'Cup not found'}, 404

        parser = reqparse.RequestParser()
        for field in [
            'cup_type', 'throat_diameter', 'bottom_diameter', 'height',
            'capacity', 'density', 'width', 'quantity_in_report',
            'sleeve', 'tooling_number', 'bottom_width', 'glasses_per_sleeve',
            'sleeves_per_box', 'corrugated_box_size', 'stacks_per_product',
            'tape_per_box_m', 'boxes_per_pallet', 'packaging_pe',
            'pe_sleeve_per_item', 'bottom_size', 'stretch_per_pallet_m',
            'pe_weight', 'number_of_streams'
        ]:
            parser.add_argument(field)

        data = parser.parse_args()
        for key, value in data.items():
            if value is not None:
                setattr(cup, key, value)

        db.session.commit()
        return {'message': 'Cup updated successfully'}, 200


class CatalogCompanyResource(Resource):
    def get(self):
        companies = CatalogCompany.query.all()
        return [{'company_name': company.company_name} for company in companies], 200

    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('company_name', required=True)
        data = parser.parse_args()

        new_company = CatalogCompany(**data)
        db.session.add(new_company)
        db.session.commit()
        return {'message': 'Company added successfully'}, 201

    def delete(self, company_name):
        company = CatalogCompany.query.get(company_name)
        if not company:
            return {'message': 'Company not found'}, 404
        db.session.delete(company)
        db.session.commit()
        return {'message': 'Company deleted'}, 200

    def put(self, company_name):
        company = CatalogCompany.query.get(company_name)
        if not company:
            return {'message': 'Company not found'}, 404

        parser = reqparse.RequestParser()
        parser.add_argument('company_name', required=True)
        data = parser.parse_args()

        company.company_name = data['company_name']
        db.session.commit()
        return {'message': 'Company updated successfully'}, 200

user_resources:
from flask_restful import Resource, reqparse
from werkzeug.security import generate_password_hash, check_password_hash
from flask import request
from app.models import User
from app import db


class UserRegister(Resource):
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('username', required=True)
        parser.add_argument('email', required=True)
        parser.add_argument('password', required=True)
        parser.add_argument('role', required=True)
        data = parser.parse_args()

        if User.query.filter((User.username == data['username']) |
                             (User.email == data['email'])).first():
            return {'message': 'User already exists'}, 400

        hashed_password = generate_password_hash(data['password'])
        new_user = User(
            username=data['username'],
            email=data['email'],
            password=hashed_password,
            role=data['role'],
            approved=False,
            blocked=False
        )

        db.session.add(new_user)
        db.session.commit()
        return {'message': 'User created successfully'}, 201


class UserLogin(Resource):
    def post(self):
        parser = reqparse.RequestParser()
        parser.add_argument('username', required=True)
        parser.add_argument('password', required=True)
        data = parser.parse_args()

        user = User.query.filter_by(username=data['username']).first()
        if user and check_password_hash(user.password, data['password']):
            if not user.approved:
                return {'message': 'Your account is pending approval.'}, 403
            if user.blocked:
                return {'message': 'Your account has been blocked.'}, 403

            # Simple response with user data
            return {
                'message': f'Welcome, {user.username}!',
                'role': user.role,
                'username': user.username
            }, 200

        return {'message': 'Invalid credentials'}, 401


class UserLogout(Resource):
    def post(self):
        return {'message': 'Logged out successfully'}, 200


class UserApprovalList(Resource):
    def get(self):
        # Get username from headers set by the frontend
        username = request.headers.get('username')

        if not username:
            return {'message': 'Not authenticated'}, 401

        user = User.query.filter_by(username=username).first()
        if not user or user.role != 'Chief Tech':
            return {'message': 'Not authorized'}, 403

        unapproved_users = User.query.filter_by(approved=False, blocked=False).all()
        return {'users': [user.to_dict() for user in unapproved_users]}, 200


class UserApproveDeny(Resource):
    def post(self, user_id):
        # Get username from headers
        username = request.headers.get('username')

        if not username:
            return {'message': 'Not authenticated'}, 401

        user = User.query.filter_by(username=username).first()
        if not user or user.role != 'Chief Tech':
            return {'message': 'Not authorized'}, 403

        parser = reqparse.RequestParser()
        parser.add_argument('action', required=True)
        data = parser.parse_args()

        target_user = User.query.get_or_404(user_id)
        if data['action'] == 'approve':
            target_user.approved = True
            target_user.blocked = False
        elif data['action'] == 'deny':
            target_user.blocked = True
            target_user.approved = False
        else:
            return {'message': 'Invalid action'}, 400

        db.session.commit()
        return {'message': f'User {target_user.username} updated successfully'}, 200

order_resources:
from flask_restful import Resource
from app.models import OrdersRegistry
from app import db

class OrderResource(Resource):
    def get(self, order_id):
        order = OrdersRegistry.query.get(order_id)
        if not order:
            return {'message': 'Order not found'}, 404
        return order.__dict__, 200

    def delete(self, order_id):
        order = OrdersRegistry.query.get(order_id)
        if not order:
            return {'message': 'Order not found'}, 404
        db.session.delete(order)
        db.session.commit()
        return {'message': 'Order deleted'}, 200

class OrderListResource(Resource):
    def get(self):
        orders = OrdersRegistry.query.all()
        return [order.__dict__ for order in orders], 200


tech_card_resources:
from flask_restful import Resource, reqparse
from app.models import TechCardPart1, TechCardPart2
from app import db

class TechCardPart1Resource(Resource):
    def get(self, card_id):
        tech_card = TechCardPart1.query.get(card_id)
        if not tech_card:
            return {'message': 'Tech card part 1 not found'}, 404
        return {
            'id': tech_card.id,
            'order_id': tech_card.order_id,
            'launch_date': tech_card.launch_date,
            'customer': tech_card.customer,
            'article': tech_card.article,
            'design': tech_card.design,
            'product_type': tech_card.product_type,
            'rim_diameter': tech_card.rim_diameter,
            'bottom_diameter': tech_card.bottom_diameter,
            'height': tech_card.height,
            'capacity': tech_card.capacity,
            'density': tech_card.density
        }, 200

    def delete(self, card_id):
        tech_card = TechCardPart1.query.get(card_id)
        if not tech_card:
            return {'message': 'Tech card part 1 not found'}, 404
        db.session.delete(tech_card)
        db.session.commit()
        return {'message': 'Tech card part 1 deleted'}, 200

class TechCardPart2Resource(Resource):
    def get(self, card_id):
        tech_card = TechCardPart2.query.get(card_id)
        if not tech_card:
            return {'message': 'Tech card part 2 not found'}, 404
        return {
            'id': tech_card.id,
            'tech_card_id': tech_card.tech_card_id,
            'printing_unit_number': tech_card.printing_unit_number,
            'lineature_capacity': tech_card.lineature_capacity,
            'shaft_number': tech_card.shaft_number,
            'color': tech_card.color,
            'viscosity': tech_card.viscosity,
            'consumption': tech_card.consumption,
            'comments': tech_card.comments
        }, 200

    def delete(self, card_id):
        tech_card = TechCardPart2.query.get(card_id)
        if not tech_card:
            return {'message': 'Tech card part 2 not found'}, 404
        db.session.delete(tech_card)
        db.session.commit()
        return {'message': 'Tech card part 2 deleted'}, 200

spec_resources:
from flask_restful import Resource, reqparse
from app.models import TechSpecification
from app import db

class SpecificationResource(Resource):
    def get(self, spec_id):
        specification = TechSpecification.query.get(spec_id)
        if not specification:
            return {'message': 'Specification not found'}, 404
        return {
            'id': specification.id,
            'order_id': specification.order_id,
            'article': specification.article,
            'design': specification.design,
            'launch_date': specification.launch_date,
            'cup_type': specification.cup_type,
            'order_quantity': specification.order_quantity,
            'color': specification.color,
            'total_weight': specification.total_weight,
            'machine': specification.machine,
            'material': specification.material,
            'paper_density': specification.paper_density,
            'side_wall': specification.side_wall,
            'size': specification.size,
            'overall_density': specification.overall_density,
            'bottom': specification.bottom,
            'bottom_size': specification.bottom_size,
            'production_speed': specification.production_speed
        }, 200

    def delete(self, spec_id):
        specification = TechSpecification.query.get(spec_id)
        if not specification:
            return {'message': 'Specification not found'}, 404
        db.session.delete(specification)
        db.session.commit()
        return {'message': 'Specification deleted'}, 200

config:
import os
from datetime import timedelta


class Config:
    SQLALCHEMY_DATABASE_URI = 'postgresql://postgres:postgres@localhost/TestDB'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    SECRET_KEY = 'Darynka'  # Used for session encryption

    # Session configuration
    SESSION_TYPE = 'filesystem'
    SESSION_FILE_DIR = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'sessions')
    SESSION_PERMANENT = True
    PERMANENT_SESSION_LIFETIME = timedelta(days=1)
    SESSION_COOKIE_SAMESITE = None
    SESSION_COOKIE_SECURE = False  # Set to True in production with HTTPS
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_NAME = 'session'

__init__:
from decimal import Decimal
from flask.json import JSONEncoder
from flask import Flask
from flask_cors import CORS
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from flask_restful import Api
import json
from flask import Response

class CustomJSONEncoder(JSONEncoder):
    def default(self, obj):
        if isinstance(obj, Decimal):
            return float(obj)
        return super().default(obj)

db = SQLAlchemy()
migrate = Migrate()

def create_app():
    app = Flask(__name__)
    CORS(app, resources={r"/api/*": {"origins": "*"}}, supports_credentials=True)
    app.config.from_object('app.config.Config')
    app.json_encoder = CustomJSONEncoder

    db.init_app(app)
    migrate.init_app(app, db)

    # Configure API
    api = Api(app)
    api.representations = {
        'application/json': lambda data, code, headers: Response(
            json.dumps(data, cls=CustomJSONEncoder),
            status=code,
            content_type='application/json'
        )
    }

    # Register Resources
    from app.resources.user_resources import UserRegister, UserLogin, UserLogout
    from app.resources.catalog_resources import CatalogCupResource, CatalogCompanyResource
    from app.resources.order_resources import OrderResource, OrderListResource
    from app.resources.tech_card_resources import TechCardPart1Resource, TechCardPart2Resource
    from app.resources.spec_resources import SpecificationResource
    from app.resources.user_resources import UserApprovalList, UserApproveDeny

    # Routes
    api.add_resource(UserApproveDeny, '/api/users/<int:user_id>/approve-deny')
    api.add_resource(UserApprovalList, '/api/users/unapproved')
    api.add_resource(CatalogCupResource, '/api/catalog/cups', '/api/catalog/cups/<string:cup_type>')
    api.add_resource(CatalogCompanyResource, '/api/catalog/companies', '/api/catalog/companies/<string:company_name>')
    api.add_resource(UserRegister, '/api/users/register')
    api.add_resource(UserLogin, '/api/users/login')
    api.add_resource(UserLogout, '/api/users/logout')
    api.add_resource(OrderResource, '/api/orders/<int:order_id>')
    api.add_resource(OrderListResource, '/api/orders')
    api.add_resource(TechCardPart1Resource, '/api/tech-cards/part1/<int:card_id>')
    api.add_resource(TechCardPart2Resource, '/api/tech-cards/part2/<int:card_id>')
    api.add_resource(SpecificationResource, '/api/specifications/<int:spec_id>')

    return app


models:
from app import db


class User(db.Model):
    __tablename__ = 'users'
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(120), nullable=False)
    role = db.Column(db.String(50), nullable=False)
    approved = db.Column(db.Boolean, default=False)
    blocked = db.Column(db.Boolean, default=False)

    def to_dict(self):
        return {
            'id': self.id,
            'username': self.username,
            'email': self.email,
            'role': self.role,
            'approved': self.approved,
            'blocked': self.blocked
        }

class CatalogCup(db.Model):
    __tablename__ = 'catalog_stakan'
    cup_type = db.Column(db.String, primary_key=True)  # Вид стакана
    throat_diameter = db.Column(db.Float, nullable=False)  # Диаметр горла
    bottom_diameter = db.Column(db.Float, nullable=False)  # Диаметр дна
    height = db.Column(db.Float, nullable=False)  # Высота
    capacity = db.Column(db.String, nullable=False)  # Емкость
    density = db.Column(db.Float, nullable=False)  # Плотность
    width = db.Column(db.Float, nullable=False)  # Ширина
    quantity_in_report = db.Column(db.Integer, nullable=False)  # Количество в рапорте
    sleeve = db.Column(db.Float, nullable=False)  # Гильза
    tooling_number = db.Column(db.Integer, nullable=False)  # Номер оснастки
    bottom_width = db.Column(db.Float, nullable=False)  # Ширина дна
    glasses_per_sleeve = db.Column(db.Integer, nullable=False)  # Количество стаканов в рукаве
    sleeves_per_box = db.Column(db.Integer, nullable=False)  # Количество рукавов в коробке
    corrugated_box_size = db.Column(db.String, nullable=False)  # Размер гофрокороба
    stacks_per_product = db.Column(db.Integer, nullable=False)  # Количество стоп в изделии
    tape_per_box_m = db.Column(db.Float, nullable=False)  # Скотч, на 1 короб м
    boxes_per_pallet = db.Column(db.Integer, nullable=False)  # Количество коробов на паллете
    packaging_pe = db.Column(db.Float, nullable=False)  # Упаковка ПЭ
    pe_sleeve_per_item = db.Column(db.Float)  # Рукав ПЭ на 1шт
    bottom_size = db.Column(db.Float, nullable=False)  # Размер донышка
    stretch_per_pallet_m = db.Column(db.Float)  # Стрейч на 1 пал. (м)
    pe_weight = db.Column(db.Float)  # Вес ПЭ
    number_of_streams = db.Column(db.Integer)  # Количество ручьев


class CatalogCompany(db.Model):
    __tablename__ = 'catalog_company'
    company_name = db.Column(db.String, primary_key=True)  # Название компании


class OrdersRegistry(db.Model):
    __tablename__ = 'orders_registry'
    registration_date = db.Column(db.Date, nullable=True, default=db.func.current_date)  # Дата регистрации
    month = db.Column(db.String, nullable=False, default=db.func.to_char(db.func.current_date(), 'Month'))  # Месяц
    company_name = db.Column(db.String, db.ForeignKey('catalog_company.company_name'), nullable=True)  # Название компании
    production_start_date = db.Column(db.Date, nullable=True)  # Дата начала производства
    order_number = db.Column(db.String, primary_key=True)  # Номер заказа
    article = db.Column(db.String, nullable=True)  # Артикул
    planned_completion_date = db.Column(db.Date, nullable=True)  # Планируемая дата завершения
    design = db.Column(db.String, nullable=False)  # Дизайн
    status = db.Column(db.String, nullable=False)  # Статус заказа
    cup_type = db.Column(db.String, db.ForeignKey('catalog_stakan.cup_type'), nullable=False)  # Тип стакана
    order_quantity = db.Column(db.Integer, nullable=True)  # Количество


class TechCardPart1(db.Model):
    __tablename__ = 'tech_card_part1'
    order_number = db.Column(db.String, db.ForeignKey('orders_registry.order_number'), primary_key=True)  # Номер заказа
    production_start_date = db.Column(db.Date, nullable=True)  # Дата запуска заказа
    customer = db.Column(db.String, nullable=True)  # Заказчик
    circulation = db.Column(db.Integer, nullable=True)  # Тираж
    cup_article = db.Column(db.String, nullable=True)  # Артикул стакана
    design = db.Column(db.String, nullable=False)  # Дизайн
    product_type = db.Column(db.String, db.ForeignKey('catalog_stakan.cup_type'), nullable=False)  # Тип изделия
    throat_diameter = db.Column(db.Float, nullable=False)  # Диаметр горла
    bottom_diameter = db.Column(db.Float, nullable=False)  # Диаметр дна
    height = db.Column(db.Float, nullable=False)  # Высота
    capacity = db.Column(db.String, nullable=False)  # Емкость
    manufacturer = db.Column(db.String, nullable=True)  # Производитель
    name = db.Column(db.String, nullable=True)  # Наименование
    density = db.Column(db.Float, nullable=False)  # Плотность
    width = db.Column(db.Float, nullable=False)  # Ширина
    pe_layer = db.Column(db.Float, nullable=True)  # Слой PE
    meters_per_circulation = db.Column(db.Float, nullable=True)  # Метры на тираж
    kg_per_circulation = db.Column(db.Float, nullable=True)  # Кг на тираж
    rapport_impressions = db.Column(db.Float, nullable=True)  # Оттиски в тираже
    bottom_material_meters = db.Column(db.Float, nullable=True)  # Расход материала на дно (метры)
    bottom_material_kg = db.Column(db.Float, nullable=True)  # Расход материала на дно (кг)
    sleeve = db.Column(db.Float, nullable=False)  # Гильза
    tooling_number = db.Column(db.Integer, nullable=False)  # Номер оснастки
    quantity_per_rapport = db.Column(db.Float, nullable=False)  # Количество на раппорте
    bottom_width = db.Column(db.Float, nullable=False)  # Ширина дна
    glasses_per_sleeve = db.Column(db.Integer, nullable=False)  # Стаканы в рукаве
    sleeves_per_box = db.Column(db.Integer, nullable=False)  # Рукава в коробке
    corrugated_box_size = db.Column(db.String, nullable=False)  # Размер коробки


class TechCardPart2(db.Model):
    __tablename__ = 'tech_card_part2'
    order_number = db.Column(db.String, db.ForeignKey('tech_card_part1.order_number'), primary_key=True)  # Номер заказа
    printing_unit_number = db.Column(db.String, nullable=True)  # Номер печатного узла
    lineature_anilox = db.Column(db.String, nullable=True)  # Линеатура
    shaft_number = db.Column(db.String, nullable=True)  # Номер вала
    name = db.Column(db.String, nullable=True)  # Наименование
    color = db.Column(db.String, nullable=True)  # Цвет
    viscosity = db.Column(db.Float, nullable=True)  # Вязкость
    consumption = db.Column(db.Float, nullable=True)  # Расход
    comments = db.Column(db.Text, nullable=True)  # Комментарии


class TechSpecification(db.Model):
    __tablename__ = 'tech_specification'
    order_number = db.Column(db.String, db.ForeignKey('orders_registry.order_number'), primary_key=True)  # Номер заказа
    article = db.Column(db.String, nullable=True)  # Артикул
    design = db.Column(db.String, nullable=False)  # Дизайн
    production_start_date = db.Column(db.Date, nullable=True)  # Дата запуска
    cup_type = db.Column(db.String, nullable=False)  # Вид стакана
    order_quantity = db.Column(db.Integer, nullable=True)  # Тираж
    color = db.Column(db.String, nullable=True)  # Цвет
    total_cup_weight = db.Column(db.Float, nullable=True)  # Вес стакана
    machine = db.Column(db.String, nullable=True)  # Станок
    material = db.Column(db.String, nullable=True)  # Материал
    paper_density = db.Column(db.String, nullable=True)  # Плотность бумаги
    side_wall = db.Column(db.String, nullable=True)  # Боковая стенка
    size_mm = db.Column(db.Float, nullable=True)  # Размер
    total_density = db.Column(db.Float, nullable=True)  # Общая плотность
    bottom = db.Column(db.String, nullable=True)  # Дно
    strokes_per_min = db.Column(db.Float, nullable=True)  # Удары в минуту
    roll_width_after_print = db.Column(db.Float, nullable=True)  # Ширина рулона после печати
    boxes_per_pallet = db.Column(db.Integer, nullable=True)  # Коробки на поддоне
    items_per_pallet = db.Column(db.Integer, nullable=True)  # Изделия на поддоне
    stretch_film_consumption = db.Column(db.Float, nullable=True)  # Расход пленки
    pallet_label_qty = db.Column(db.Float, nullable=True)  # Этикетки на поддон


run:
from datetime import timedelta
from app import create_app
from flask_cors import CORS
from flask_session import Session

app = create_app()

# Explicit session config
app.config.update(
    SESSION_COOKIE_SAMESITE="None",  # Required for cross-origin
    SESSION_COOKIE_SECURE=False,      # Set True in production with HTTPS
    SESSION_COOKIE_HTTPONLY=True,
    PERMANENT_SESSION_LIFETIME=timedelta(hours=1),
    SESSION_REFRESH_EACH_REQUEST=True,
    SESSION_TYPE='filesystem'
)

# Initialize Session
Session(app)

# Configure CORS after Session
CORS(
    app,
    resources={r"/api/*": {"origins": ["http://localhost:3000"]}},
    supports_credentials=True,
    allow_headers=["Content-Type"],
    expose_headers=["Set-Cookie"]
)

if __name__ == '__main__':
    app.run(debug=True)


React part:
index.html:
<!DOCTYPE html>
<html lang="en">
<head>
  <link rel="stylesheet" href="sb-admin-2.min.css">
  <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.5/js/jquery.dataTables.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/2.11.7/umd/popper.min.js"></script>
  <script src="sb-admin-2.min.js"></script>
  <script src="datatables-demo.js"></script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
  <meta charset="UTF-8">
  <title>ERP System</title>
</head>
<body>
<div id="root"></div>
</body>
</html>

button:
import React from "react";

const Button = React.forwardRef(
    ({ className = "", variant = "default", size = "default", ...props }, ref) => {
        const baseStyles =
            "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors " +
            "focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 " +
            "disabled:opacity-50 disabled:pointer-events-none ring-offset-background";

        // Hardcode #acdc04 for default variant
        const variants = {
            default:
                "bg-[#acdc04] text-black hover:bg-[#acdc04]/90",
            outline:
                "border border-[#acdc04] text-[#acdc04] hover:bg-[#acdc04]/10 hover:text-black",
            ghost:
                "hover:bg-[#acdc04]/10 hover:text-[#acdc04]",
        };

        const sizes = {
            default: "h-10 py-2 px-4",
            sm: "h-9 px-3 rounded-md",
            lg: "h-11 px-8 rounded-md",
            icon: "h-10 w-10",
        };

        return (
            <button
                className={`${baseStyles} ${variants[variant]} ${sizes[size]} ${className}`}
                ref={ref}
                {...props}
            />
        );
    }
);

export { Button };


card:
// components/ui/card.js
import React from "react";
import { cn } from "./utils";

const Card = React.forwardRef(({ className, ...props }, ref) => (
    <div
        ref={ref}
        className={cn(
            "rounded-lg border bg-card text-card-foreground shadow-sm",
            className
        )}
        {...props}
    />
));

const CardHeader = React.forwardRef(({ className, ...props }, ref) => (
    <div
        ref={ref}
        className={cn("flex flex-col space-y-1.5 p-6", className)}
        {...props}
    />
));

const CardTitle = React.forwardRef(({ className, ...props }, ref) => (
    <h3
        ref={ref}
        className={cn(
            "text-lg font-semibold leading-none tracking-tight",
            className
        )}
        {...props}
    />
));

const CardDescription = React.forwardRef(({ className, ...props }, ref) => (
    <p
        ref={ref}
        className={cn("text-sm text-muted-foreground", className)}
        {...props}
    />
));

const CardContent = React.forwardRef(({ className, ...props }, ref) => (
    <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
));

const CardFooter = React.forwardRef(({ className, ...props }, ref) => (
    <div
        ref={ref}
        className={cn("flex items-center p-6 pt-0", className)}
        {...props}
    />
));

export { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter };

dialog:
// components/ui/dialog.js
import * as React from 'react'
import * as DialogPrimitive from '@radix-ui/react-dialog'
import { X } from 'lucide-react'
import { cn } from './utils'

/**
 *
 * USAGE:
 *
 *   import {
 *     Dialog,
 *     DialogTrigger,
 *     DialogContent,
 *     DialogHeader,
 *     DialogTitle,
 *     DialogDescription,
 *     DialogFooter,
 *     DialogClose
 *   } from '../components/ui/dialog'
 *
 *   <Dialog open={isOpen} onOpenChange={setIsOpen}>
 *     <DialogTrigger>Open</DialogTrigger>
 *     <DialogContent>
 *       <DialogHeader>
 *         <DialogTitle>Modal Title</DialogTitle>
 *         <DialogDescription>Some Description</DialogDescription>
 *       </DialogHeader>
 *       <DialogFooter>
 *         <DialogClose>Cancel</DialogClose>
 *       </DialogFooter>
 *     </DialogContent>
 *   </Dialog>
 *
 */

// Root & Trigger
const Dialog = DialogPrimitive.Root
const DialogTrigger = DialogPrimitive.Trigger

// Close button (convenience)
const DialogClose = DialogPrimitive.Close

// Portal
const DialogPortal = ({ className, children, ...props }) => (
    <DialogPrimitive.Portal {...props}>
        <div className={cn('fixed inset-0 z-50 flex items-start justify-center sm:items-center', className)}>
            {children}
        </div>
    </DialogPrimitive.Portal>
)
DialogPortal.displayName = DialogPrimitive.Portal.displayName

// Overlay
const DialogOverlay = React.forwardRef(({ className, ...props }, ref) => (
    <DialogPrimitive.Overlay
        ref={ref}
        className={cn(
            'fixed inset-0 z-50 bg-black/50 backdrop-blur-sm transition-all',
            // If you want the open/close animations, add data-state classes
            'data-[state=open]:animate-fadeIn data-[state=closed]:animate-fadeOut',
            className
        )}
        {...props}
    />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

// Content
const DialogContent = React.forwardRef(({ className, children, ...props }, ref) => (
    <DialogPortal>
        <DialogOverlay />
        <DialogPrimitive.Content
            ref={ref}
            className={cn(
                'fixed z-50 grid w-full max-w-lg gap-4 rounded-lg bg-white p-6 shadow-lg',
                'left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2',
                'duration-200 data-[state=open]:animate-slideIn data-[state=closed]:animate-slideOut',
                className
            )}
            {...props}
        >
            {children}
            {/* "X" close icon (top-right corner) */}
            <DialogPrimitive.Close
                className="absolute right-4 top-4 rounded-sm p-1 text-gray-600 hover:text-gray-900 focus:outline-none"
            >
                <X className="h-4 w-4" />
                <span className="sr-only">Close</span>
            </DialogPrimitive.Close>
        </DialogPrimitive.Content>
    </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

// Header, Footer, Title, Description
const DialogHeader = ({ className, ...props }) => (
    <div className={cn('flex flex-col space-y-1.5 text-center sm:text-left', className)} {...props} />
)
DialogHeader.displayName = 'DialogHeader'

const DialogFooter = ({ className, ...props }) => (
    <div className={cn('flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2', className)} {...props} />
)
DialogFooter.displayName = 'DialogFooter'

const DialogTitle = React.forwardRef(({ className, ...props }, ref) => (
    <DialogPrimitive.Title
        ref={ref}
        className={cn('text-lg font-semibold leading-none tracking-tight', className)}
        {...props}
    />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef(({ className, ...props }, ref) => (
    <DialogPrimitive.Description
        ref={ref}
        className={cn('text-sm text-gray-500', className)}
        {...props}
    />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
    Dialog,
    DialogTrigger,
    DialogPortal,
    DialogOverlay,
    DialogContent,
    DialogHeader,
    DialogFooter,
    DialogTitle,
    DialogDescription,
    DialogClose
}

input:
import React from "react";

const Input = React.forwardRef(({ className, type, ...props }, ref) => {
    return (
        <input
            type={type}
            className={`flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 ${className}`}
            ref={ref}
            {...props}
        />
    );
});

export { Input };


utils:
import { clsx, ClassValue } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs) {
    return twMerge(clsx(inputs));
}

catalogpage:
// pages/CatalogPage.js

import React, { useState, useEffect } from 'react';
import DataTable from 'react-data-table-component';
import axios from 'axios';
import { api } from "../services/api"; // or however you export it
import { fetchTableData, deleteRecord } from '../services/api';
import { Button } from '../components/ui/button';
import {
    Dialog,
    DialogContent,
    DialogHeader,
    DialogTitle,
    DialogDescription,
    DialogFooter,
} from '../components/ui/dialog';
import { Input } from '../components/ui/input';

import { Pencil, Trash2, Plus } from 'lucide-react';

const CatalogPage = () => {
    const [cups, setCups] = useState([]);
    const [companies, setCompanies] = useState([]);

    // Controls the open/close state of the Dialog
    const [isModalOpen, setIsModalOpen] = useState(false);

    // Whether we are editing "cups" or "companies"
    const [modalType, setModalType] = useState('');

    // "add" vs. "edit"
    const [modalMode, setModalMode] = useState('');

    // form data object
    const [formData, setFormData] = useState({});

    useEffect(() => {
        loadData();
    }, []);

    const loadData = async () => {
        try {
            const [cupsResponse, companiesResponse] = await Promise.all([
                fetchTableData('catalog/cups'),
                fetchTableData('catalog/companies'),
            ]);
            setCups(cupsResponse.data);
            setCompanies(companiesResponse.data);
        } catch (error) {
            console.error('Failed to load data:', error);
            alert('Failed to load catalog data. Please try again.');
        }
    };

    const handleDelete = async (id, type) => {
        if (window.confirm(`Are you sure you want to delete this ${type === 'cups' ? 'cup' : 'company'}?`)) {
            try {
                await deleteRecord(`catalog/${type}`, id);
                loadData();
            } catch (error) {
                console.error('Failed to delete:', error);
                alert('Failed to delete the item. Please try again.');
            }
        }
    };

    const handleEdit = (row, type) => {
        console.log('Clicked edit');
        setFormData(row);      // Fill the form with the selected row's data
        setModalType(type);    // 'cups' or 'companies'
        setModalMode('edit');  // 'edit'
        setIsModalOpen(true);
    };

    const handleAdd = (type) => {
        console.log('Clicked add')
        setFormData({});
        setModalType(type);
        setModalMode('add');
        setIsModalOpen(true);
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value,
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();

        if (!window.confirm('Are you sure you want to save these changes?')) {
            return;
        }

        try {
            const endpoint = modalType === 'cups' ? 'catalog/cups' : 'catalog/companies';
            const identifier = modalType === 'cups' ? formData.cup_type : formData.company_name;

            if (modalMode === 'add') {
                await api.post(`/${endpoint}`, formData);
            } else {
                // PUT /catalog/cups/<cup_type> or /catalog/companies/<company_name>
                await axios.put(`/${endpoint}/${identifier}`, formData);
            }

            setIsModalOpen(false);
            loadData();
        } catch (error) {
            console.error('Failed to save:', error);
            alert('Failed to save changes. Please try again.');
        }
    };

    // Conditionally return fields based on cups or companies
    const getFields = () => {
        if (modalType === 'cups') {
            return [
                { name: 'cup_type', label: 'Cup Type', type: 'text', required: true },
                { name: 'throat_diameter', label: 'Throat Diameter', type: 'number', step: 0.01 },
                { name: 'bottom_diameter', label: 'Bottom Diameter', type: 'number', step: 0.01 },
                { name: 'height', label: 'Height', type: 'number', step: 0.01 },
                { name: 'capacity', label: 'Capacity', type: 'text' },
                { name: 'density', label: 'Density', type: 'number', step: 0.01 },
                { name: 'width', label: 'Width', type: 'number', step: 0.01 },
                { name: 'quantity_in_report', label: 'Quantity in Report', type: 'number' },
                { name: 'sleeve', label: 'Sleeve', type: 'number' },
                { name: 'tooling_number', label: 'Tooling Number', type: 'number' },
                { name: 'bottom_width', label: 'Bottom Width', type: 'number', step: 0.01 },
                { name: 'glasses_per_sleeve', label: 'Glasses per Sleeve', type: 'number' },
                { name: 'sleeves_per_box', label: 'Sleeves per Box', type: 'number' },
                { name: 'corrugated_box_size', label: 'Corrugated Box Size', type: 'text' },
                { name: 'stacks_per_product', label: 'Stacks per Product', type: 'number' },
                { name: 'tape_per_box_m', label: 'Tape per Box (m)', type: 'number', step: 0.01 },
                { name: 'boxes_per_pallet', label: 'Boxes per Pallet', type: 'number' },
                { name: 'packaging_pe', label: 'Packaging PE', type: 'number', step: 0.01 },
                { name: 'pe_sleeve_per_item', label: 'PE Sleeve per Item', type: 'number', step: 0.01 },
                { name: 'bottom_size', label: 'Bottom Size', type: 'number', step: 0.01 },
                { name: 'stretch_per_pallet_m', label: 'Stretch per Pallet (m)', type: 'number', step: 0.01 },
                { name: 'pe_weight', label: 'PE Weight', type: 'number', step: 0.01 },
                { name: 'number_of_streams', label: 'Number of Streams', type: 'number' },
            ];
        } else {
            // For companies
            return [
                { name: 'company_name', label: 'Company Name', type: 'text', required: true },
            ];
        }
    };

    // Columns
    const cupsColumns = [
        { name: 'Cup Type', selector: (row) => row.cup_type, sortable: true },
        { name: 'Throat Diameter', selector: (row) => row.throat_diameter, sortable: true },
        { name: 'Bottom Diameter', selector: (row) => row.bottom_diameter, sortable: true },
        { name: 'Height', selector: (row) => row.height, sortable: true },
        { name: 'Capacity', selector: (row) => row.capacity, sortable: true },
        { name: 'Density', selector: (row) => row.density, sortable: true },
        { name: 'Width', selector: (row) => row.width, sortable: true },
        { name: 'Quantity in Report', selector: (row) => row.quantity_in_report, sortable: true },
        { name: 'Sleeve', selector: (row) => row.sleeve, sortable: true },
        { name: 'Tooling Number', selector: (row) => row.tooling_number, sortable: true },
        { name: 'Bottom Width', selector: (row) => row.bottom_width, sortable: true },
        { name: 'Glasses/Sleeve', selector: (row) => row.glasses_per_sleeve, sortable: true },
        { name: 'Sleeves/Box', selector: (row) => row.sleeves_per_box, sortable: true },
        { name: 'Box Size', selector: (row) => row.corrugated_box_size, sortable: true },
        {
            name: 'Actions',
            cell: (row) => (
                <div className="flex gap-2">
                    <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleEdit(row, 'cups')}
                        aria-label="Edit cup"
                    >
                        <Pencil className="h-4 w-4" />
                    </Button>
                    <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleDelete(row.cup_type, 'cups')}
                        aria-label="Delete cup"
                    >
                        <Trash2 className="h-4 w-4" />
                    </Button>
                </div>
            ),
            width: '120px',
        },
    ];

    const companiesColumns = [
        { name: 'Company Name', selector: (row) => row.company_name, sortable: true },
        {
            name: 'Actions',
            cell: (row) => (
                <div className="flex gap-2">
                    <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleEdit(row, 'companies')}
                        aria-label="Edit company"
                    >
                        <Pencil className="h-4 w-4" />
                    </Button>
                    <Button
                        variant="ghost"
                        size="icon"
                        onClick={() => handleDelete(row.company_name, 'companies')}
                        aria-label="Delete company"
                    >
                        <Trash2 className="h-4 w-4" />
                    </Button>
                </div>
            ),
            width: '120px',
        },
    ];

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-6">Catalog Management</h1>

            {/* Cups Table */}
            <div className="mb-8">
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold">Cups Catalog</h2>
                    <Button onClick={() => handleAdd('cups')}>
                        <Plus className="h-4 w-4 mr-2" />
                        Add New Cup
                    </Button>
                </div>
                <DataTable
                    columns={cupsColumns}
                    data={cups}
                    pagination
                    dense
                    highlightOnHover
                    responsive
                />
            </div>

            {/* Companies Table */}
            <div>
                <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold">Companies Catalog</h2>
                    <Button onClick={() => handleAdd('companies')}>
                        <Plus className="h-4 w-4 mr-2" />
                        Add New Company
                    </Button>
                </div>
                <DataTable
                    columns={companiesColumns}
                    data={companies}
                    pagination
                    dense
                    highlightOnHover
                    responsive
                />
            </div>

            {/* Dialog for Add/Edit */}
            <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
                <DialogContent className="sm:max-w-[800px] max-h-[90vh] overflow-y-auto">
                    <DialogHeader>
                        <DialogTitle>
                            {modalMode === 'add' ? 'Add New' : 'Edit'}{' '}
                            {modalType === 'cups' ? 'Cup' : 'Company'}
                        </DialogTitle>
                        <DialogDescription>
                            {modalMode === 'add'
                                ? 'Fill out the form to add a new'
                                : 'Update the details of the'}{' '}
                            {modalType === 'cups' ? 'cup' : 'company'} entry
                        </DialogDescription>
                    </DialogHeader>

                    <form onSubmit={handleSubmit} className="space-y-4 p-4">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {getFields().map((field) => (
                                <div key={field.name} className="flex flex-col">
                                    <label htmlFor={field.name} className="text-sm font-medium mb-1">
                                        {field.label}
                                    </label>
                                    <Input
                                        id={field.name}
                                        name={field.name}
                                        type={field.type || 'text'}
                                        step={field.step || undefined}
                                        value={formData[field.name] || ''}
                                        onChange={handleInputChange}
                                        required={field.required}
                                        className="w-full"
                                    />
                                </div>
                            ))}
                        </div>

                        <DialogFooter className="mt-6">
                            <Button
                                type="button"
                                variant="outline"
                                onClick={() => setIsModalOpen(false)}
                            >
                                Cancel
                            </Button>
                            <Button type="submit">Save Changes</Button>
                        </DialogFooter>
                    </form>
                </DialogContent>
            </Dialog>
        </div>
    );
};

export default CatalogPage;


dashboard:
import React from "react";
import Navbar from "./Navbar";

const Dashboard = () => {
    return (
        <div id="wrapper">
            <div id="content-wrapper" className="d-flex flex-column">
                <div id="content">
                    <Navbar />
                    <div className="container-fluid">
                        <h1 className="h3 mb-4 text-gray-800">Dashboard</h1>
                        <p>Welcome to the ERP System Dashboard!</p>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default Dashboard;

layout:
import React from 'react';
import Navbar from './Navbar';

const Layout = ({ children }) => {
    return (
        <div className="min-h-screen bg-gray-50">
            <Navbar />
            <main className="pt-16">
                {children}
            </main>
        </div>
    );
};

export default Layout;


login:
import React, { useState } from "react";
import { loginUser } from "../services/api";
import { useAuth } from '../context/AuthContext';
import { useNavigate } from "react-router-dom";

const Login = () => {
    const [username, setUsername] = useState("");
    const [password, setPassword] = useState("");
    const [error, setError] = useState("");
    const { login } = useAuth();
    const navigate = useNavigate();

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError("");

        try {
            const response = await loginUser({
                username: username,  // Changed from email to username
                password: password
            });

            if (response.data) {
                login(response.data);  // Pass the entire data object to login

                // If Chief Tech, redirect to approval page
                if (response.data.role === 'Chief Tech') {
                    navigate('/user-approval');
                } else {
                    navigate('/dashboard');
                }
            }
        } catch (error) {
            if (error.response?.status === 403) {
                setError(error.response.data.message || "Account pending approval");
            } else {
                setError("Login failed. Please check your credentials.");
            }
        }
    };

    return (
        <div className="container mx-auto mt-8 max-w-md">
            <div className="bg-white p-8 rounded-lg shadow-md">
                <h1 className="text-2xl font-bold mb-6 text-center">Login</h1>

                {error && (
                    <div className="bg-red-50 text-red-700 p-3 rounded mb-4">
                        {error}
                    </div>
                )}

                <form onSubmit={handleSubmit} className="space-y-4">
                    <div>
                        <label className="block text-sm font-medium mb-1">
                            Username
                        </label>
                        <input
                            type="text"
                            className="w-full p-2 border rounded"
                            value={username}
                            onChange={(e) => setUsername(e.target.value)}
                        />
                    </div>

                    <div>
                        <label className="block text-sm font-medium mb-1">
                            Password
                        </label>
                        <input
                            type="password"
                            className="w-full p-2 border rounded"
                            value={password}
                            onChange={(e) => setPassword(e.target.value)}
                        />
                    </div>

                    <button
                        type="submit"
                        className="w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700"
                    >
                        Login
                    </button>
                </form>
            </div>
        </div>
    );
};

export default Login;

navbar:
import React, { useState } from 'react';
import { useAuth } from '../context/AuthContext';
import { useNavigate, Link, useLocation } from 'react-router-dom';
import { User, LogOut } from 'lucide-react';

const Navbar = () => {
    const [isDropdownOpen, setIsDropdownOpen] = useState(false);
    const { logout, isAuthenticated, role } = useAuth();
    const navigate = useNavigate();
    const location = useLocation();

    const handleLogout = () => {
        logout();
        navigate('/');
    };

    // Only show these nav items if user is authenticated
    const navItems = [
        { path: '/catalog', label: 'Catalog', showOn: ['/tech-spec', '/tech-card'] },
        { path: '/tech-spec', label: 'Tech Spec', showOn: ['/catalog', '/tech-card'] },
        { path: '/tech-card', label: 'Tech Card', showOn: ['/catalog', '/tech-spec'] },
        // Add admin-only items here if needed
        { path: '/register', label: 'Register User', showOn: ['*'], adminOnly: true },
    ];

    const visibleNavItems = navItems.filter(item => {
        const showOnMatches = item.showOn.includes('*') || item.showOn.includes(location.pathname);

        // If it's adminOnly, restrict to "Chief Tech"
        if (item.adminOnly && role !== 'Chief Tech') {
            return false;
        }

        return showOnMatches;
    });

    return (
        <nav className="fixed top-0 left-0 right-0 bg-white shadow-sm z-50">
            <div className="max-w-7xl mx-auto px-4">
                <div className="flex justify-between items-center h-16">
                    {/* Logo */}
                    <Link to="/dashboard" className="flex items-center">
                        <img
                            src="/logo.png"
                            alt="ERP System Logo"
                            className="h-8 w-auto"
                        />
                    </Link>

                    {/* Navigation Links */}
                    {isAuthenticated && (
                        <div className="hidden md:flex items-center space-x-4">
                            {visibleNavItems.map((item) => (
                                <Link
                                    key={item.path}
                                    to={item.path}
                                    className="text-gray-600 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium"
                                >
                                    {item.label}
                                </Link>
                            ))}
                        </div>
                    )}

                    {/* User Menu */}
                    {isAuthenticated && (
                        <div className="relative">
                            <button
                                onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                                className="flex items-center text-gray-600 hover:text-gray-900"
                            >
                                <User className="h-6 w-6" />
                            </button>

                            {isDropdownOpen && (
                                <div className="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1">
                                    <button
                                        onClick={handleLogout}
                                        className="flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100"
                                    >
                                        <LogOut className="h-4 w-4 mr-2" />
                                        Logout
                                    </button>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            </div>
        </nav>
    );
};

export default Navbar;


protectedroute:
import { Navigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';

export const ProtectedRoute = ({ children }) => {
    const { isAuthenticated } = useAuth();
    return isAuthenticated ? children : <Navigate to="/" />;
};


register:
import React, { useState } from "react";
import { registerUser } from "../services/api";

const Register = () => {
    const [formData, setFormData] = useState({
        username: "",
        email: "",
        password: "",
        confirmPassword: "",
        role: "Chief Tech", // Default role
    });

    const handleSubmit = async (e) => {
        e.preventDefault();

        // Validate password and confirmation
        if (formData.password !== formData.confirmPassword) {
            alert("Passwords do not match!");
            return;
        }

        try {
            const { username, email, password, role } = formData; // Exclude confirmPassword
            const response = await registerUser({ username, email, password, role });
            alert(response.data.message);
            window.location.href = "/";
        } catch (error) {
            alert("Registration failed. Please check your input.");
        }
    };

    return (
        <div className="container">
            <h1 className="text-center mt-4">Register</h1>
            <form onSubmit={handleSubmit} className="user">
                <div className="form-group">
                    <label>Username</label>
                    <input
                        type="text"
                        className="form-control form-control-user"
                        placeholder="Username"
                        value={formData.username}
                        onChange={(e) => setFormData({ ...formData, username: e.target.value })}
                        required
                    />
                </div>
                <div className="form-group">
                    <label>Email</label>
                    <input
                        type="email"
                        className="form-control form-control-user"
                        placeholder="Email"
                        value={formData.email}
                        onChange={(e) => setFormData({ ...formData, email: e.target.value })}
                        required
                    />
                </div>
                <div className="form-group">
                    <label>Role</label>
                    <select
                        className="form-control form-control-user"
                        value={formData.role}
                        onChange={(e) => setFormData({ ...formData, role: e.target.value })}
                        required
                    >
                        <option value="Chief Tech">Chief Tech</option>
                        <option value="Sales Manager">Sales Manager</option>
                    </select>
                </div>
                <div className="form-group">
                    <label>Password</label>
                    <input
                        type="password"
                        className="form-control form-control-user"
                        placeholder="Password"
                        value={formData.password}
                        onChange={(e) => setFormData({ ...formData, password: e.target.value })}
                        required
                    />
                </div>
                <div className="form-group">
                    <label>Confirm Password</label>
                    <input
                        type="password"
                        className="form-control form-control-user"
                        placeholder="Confirm Password"
                        value={formData.confirmPassword}
                        onChange={(e) => setFormData({ ...formData, confirmPassword: e.target.value })}
                        required
                    />
                </div>
                <button className="btn btn-primary btn-user btn-block">Register</button>
            </form>
        </div>
    );
};

export default Register;


sidebar:
import React from "react";

const Sidebar = () => (
    <ul className="navbar-nav bg-gradient-primary sidebar sidebar-dark accordion" id="accordionSidebar">
        <a className="sidebar-brand d-flex align-items-center justify-content-center" href="/">
            <div className="sidebar-brand-icon rotate-n-15">
                <i className="fas fa-laugh-wink"></i>
            </div>
            <div className="sidebar-brand-text mx-3">ERP System</div>
        </a>
        <hr className="sidebar-divider my-0" />
        <li className="nav-item">
            <a className="nav-link" href="/dashboard">
                <i className="fas fa-fw fa-tachometer-alt"></i>
                <span>Dashboard</span>
            </a>
        </li>
        <li className="nav-item">
            <a className="nav-link" href="/catalog">
                <i className="fas fa-fw fa-book"></i>
                <span>Catalog</span>
            </a>
        </li>
    </ul>
);

export default Sidebar;

tableview:
import React, { useEffect, useState } from "react";
import DataTable from "react-data-table-component";
import { fetchTableData } from "../services/api";

const TableView = ({ endpoint }) => {
    const [data, setData] = useState([]);

    useEffect(() => {
        const loadData = async () => {
            try {
                const response = await fetchTableData(endpoint);
                setData(response.data);
            } catch (error) {
                alert("Failed to load data.");
            }
        };

        loadData();
    }, [endpoint]);

    const columns = Object.keys(data[0] || {}).map((key) => ({
        name: key,
        selector: (row) => row[key],
        sortable: true,
    }));

    return (
        <div className="container">
            <h1 className="text-center mt-4">Table View</h1>
            <DataTable columns={columns} data={data} pagination />
        </div>
    );
};

export default TableView;


userapprovalpage:
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { fetchUnapprovedUsers, approveOrDenyUser } from '../services/api';

const UserApprovalPage = () => {
    const [unapprovedUsers, setUnapprovedUsers] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const navigate = useNavigate();
    const { isAuthenticated } = useAuth();

    useEffect(() => {
        // Check if user is logged in
        if (!isAuthenticated || !localStorage.getItem('username')) {
            navigate('/');
            return;
        }
        loadUsers();
    }, [navigate, isAuthenticated]);

    const loadUsers = async () => {
        try {
            setLoading(true);
            const username = localStorage.getItem('username');
            if (!username) {
                navigate('/');
                return;
            }

            const response = await fetchUnapprovedUsers();
            setUnapprovedUsers(response.data.users || []);
            setError(null);
        } catch (err) {
            console.error('Error loading unapproved users:', err);
            if (err.response?.status === 401 || err.response?.status === 403) {
                navigate('/');
            } else {
                setError(err.response?.data?.message || 'Failed to load unapproved users');
            }
        } finally {
            setLoading(false);
        }
    };

    const handleAction = async (userId, action) => {
        try {
            await approveOrDenyUser(userId, action);
            await loadUsers();
        } catch (err) {
            console.error(`Error ${action}ing user:`, err);
            if (err.response?.status === 401 || err.response?.status === 403) {
                navigate('/');
            } else {
                setError(err.response?.data?.message || `Failed to ${action} user`);
            }
        }
    };

    if (loading) {
        return <div className="p-4">Loading...</div>;
    }

    return (
        <div className="container mx-auto p-4">
            <h1 className="text-2xl font-bold mb-6">User Approval Management</h1>

            {error && (
                <div className="bg-red-50 text-red-700 p-4 rounded mb-4">
                    {error}
                </div>
            )}

            {unapprovedUsers.length === 0 ? (
                <div className="bg-white rounded-lg shadow p-6">
                    <p className="text-gray-500">No users pending approval</p>
                </div>
            ) : (
                <div className="space-y-4">
                    {unapprovedUsers.map((user) => (
                        <div key={user.id} className="bg-white rounded-lg shadow p-6">
                            <div className="flex justify-between items-center">
                                <div>
                                    <h3 className="font-semibold">{user.username}</h3>
                                    <p className="text-sm text-gray-500">{user.email}</p>
                                    <p className="text-sm text-gray-500">Role: {user.role}</p>
                                </div>
                                <div className="flex gap-2">
                                    <button
                                        onClick={() => handleAction(user.id, 'approve')}
                                        className="px-4 py-2 bg-green-50 hover:bg-green-100 text-green-700 rounded"
                                    >
                                        Approve
                                    </button>
                                    <button
                                        onClick={() => handleAction(user.id, 'deny')}
                                        className="px-4 py-2 bg-red-50 hover:bg-red-100 text-red-700 rounded"
                                    >
                                        Deny
                                    </button>
                                </div>
                            </div>
                        </div>
                    ))}
                </div>
            )}
        </div>
    );
};

export default UserApprovalPage;

authcontext:
import React, { createContext, useState, useContext, useEffect } from 'react';

const AuthContext = createContext(null);

export const AuthProvider = ({ children }) => {
    const [isAuthenticated, setIsAuthenticated] = useState(() => {
        return !!localStorage.getItem('username');
    });

    const [role, setRole] = useState(() => {
        return localStorage.getItem('role') || null;
    });

    const [username, setUsername] = useState(() => {
        return localStorage.getItem('username') || null;
    });

    const login = (userData) => {
        localStorage.setItem('username', userData.username);
        localStorage.setItem('role', userData.role);
        setIsAuthenticated(true);
        setRole(userData.role);
        setUsername(userData.username);
    };

    const logout = () => {
        localStorage.removeItem('username');
        localStorage.removeItem('role');
        setIsAuthenticated(false);
        setRole(null);
        setUsername(null);
    };

    return (
        <AuthContext.Provider value={{
            isAuthenticated,
            login,
            logout,
            role,
            username
        }}>
            {children}
        </AuthContext.Provider>
    );
};

export const useAuth = () => useContext(AuthContext);


api.js:
import axios from "axios";

const API_URL = "http://127.0.0.1:5000/api";

export const api = axios.create({
    baseURL: API_URL,
    withCredentials: true,
    headers: {
        'Content-Type': 'application/json'
    }
});

// Response interceptor for handling errors
api.interceptors.response.use(
    (response) => response,
    (error) => {
        console.error('API Error:', error.response?.data || error.message);
        return Promise.reject(error);
    }
);

export const loginUser = async (data) => {
    try {
        const response = await api.post('/users/login', data);
        if (response.data.role) {
            localStorage.setItem('role', response.data.role);
            localStorage.setItem('username', response.data.username);
        }
        return response;
    } catch (error) {
        console.error('Login error:', error.response?.data || error.message);
        throw error;
    }
};

export const logoutUser = async () => {
    try {
        await api.post('/users/logout');
        localStorage.removeItem('role');
        localStorage.removeItem('username');
    } catch (error) {
        console.error('Logout error:', error);
        // Clear local storage even if the request fails
        localStorage.clear();
        throw error;
    }
};

export const registerUser = (data) => api.post('/users/register', data);

export const fetchTableData = (endpoint) => api.get(`/${endpoint}`);

export const deleteRecord = (endpoint, id) => api.delete(`/${endpoint}/${id}`);

export const updateRecord = (endpoint, id, data) => api.put(`/${endpoint}/${id}`, data);

export const fetchUnapprovedUsers = async () => {
    try {
        const response = await api.get('/users/unapproved');
        return response;
    } catch (error) {
        console.error('Error fetching unapproved users:', error.response?.data || error.message);
        throw error;
    }
};

export const approveOrDenyUser = (userId, action) =>
    api.post(`/users/${userId}/approve-deny`, { action });


index.css:
@tailwind base;
@tailwind components;
@tailwind utilities;


body {
    font-family: Arial, sans-serif;
    background-color: #f8f9fc;
    margin: 0;
    padding: 0;
}

.container {
    padding: 20px;
}


index.js:
import React from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import Layout from "./components/Layout";
import Login from "./components/Login";
import Register from "./components/Register";
import Dashboard from "./components/Dashboard";
import TableView from "./components/TableView";
import CatalogPage from "./components/CatalogPage";
import "./index.css";
import { AuthProvider } from "./context/AuthContext";
import { ProtectedRoute } from "./components/ProtectedRoute";
import UserApprovalPage from "./components/UserApprovalPage";

const TechSpec = () => <div className="p-4">Tech Spec Page (Coming Soon)</div>;
const TechCard = () => <div className="p-4">Tech Card Page (Coming Soon)</div>;

const App = () => {
    return (
        <AuthProvider>
            <Router>
                <Routes>
                    <Route path="/" element={<Login />} />
                    <Route
                        path="/*"
                        element={
                            <ProtectedRoute>
                                <Layout>
                                    <Routes>
                                        <Route path="/dashboard" element={<Dashboard />} />
                                        <Route path="/tables" element={<TableView endpoint="catalog" />} />
                                        <Route path="/catalog" element={<CatalogPage />} />
                                        <Route path="/tech-spec" element={<TechSpec />} />
                                        <Route path="/tech-card" element={<TechCard />} />
                                        <Route path="/register" element={<Register />} />
                                        <Route path="/user-approval" element={<UserApprovalPage />} />
                                    </Routes>
                                </Layout>
                            </ProtectedRoute>
                        }
                    />
                </Routes>
            </Router>
        </AuthProvider>
    );
};

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(<App />);